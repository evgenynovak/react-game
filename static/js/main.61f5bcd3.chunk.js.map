{"version":3,"sources":["components/Cell.js","components/Board.js","components/InfoScreen.js","App.js","index.js"],"names":["CellBlock","styled","div","props","background","cursor","Cell","cell","onClick","symbol","status","backgroundColor","BoardBlock","Board","board","onClickAtCell","map","i","InfoScreenBlock","InfoScreenH1","h1","InfoScreenP","p","InfoScreen","statusGame","AppWrapper","FooterBlock","LogoBlock","a","GitBlock","boardData","startGame","App","useState","state","setState","useEffect","filter","length","dataCell","setTimeout","CellLessTwo","index","href","Global","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61f5bcd3.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst CellBlock = styled.div`\r\n  display: flex;\r\n  min-height: 100px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 5rem;\r\n  background: ${props => props.background};\r\n  cursor: ${props => props.cursor }\r\n\r\n`\r\n\r\nfunction Cell({cell, onClick}) {\r\n  let {symbol, status} = cell;\r\n\r\n  const backgroundColor = (status) => {\r\n    switch(status) {\r\n      case \"Open\": return \"#FFEF9F\"\r\n      break;\r\n      case \"Closed\": return \"#90F1EF\"\r\n      break;\r\n      case \"Done\": return \"#C1FBA4\"\r\n      break;\r\n      case \"Failed\": return \"#FFD6E0\"\r\n      break;\r\n      default: return \"\"\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CellBlock background={backgroundColor(status)} cursor={status === \"Closed\" ? \"pointer\" : \"\"} onClick={onClick}>\r\n        {status == \"Closed\" ? \"\" : symbol}\r\n    </CellBlock>\r\n  );\r\n}\r\n\r\nexport default Cell;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Cell from './Cell';\r\n\r\nconst BoardBlock = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  width: 700px;\r\n  height: 500px;\r\n  gap: 3px;\r\n`\r\n\r\nfunction Board ({board, onClickAtCell}) {\r\n  return (\r\n    <BoardBlock>\r\n      {board.map( (cell, i) =>\r\n        <Cell key={i} cell={cell} onClick={() => onClickAtCell(i)} />\r\n      )}\r\n    </BoardBlock>\r\n  );\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Board from './Board';\r\n\r\nconst InfoScreenBlock = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  width: 700px;\r\n  height: 500px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  background: ${props => props.background};\r\n`\r\nconst InfoScreenH1 = styled.h1`\r\n  font-size: 4rem;\r\n  padding: 1rem;\r\n`\r\nconst InfoScreenP = styled.p`\r\n  font-size: 2rem;\r\n`\r\n\r\nfunction InfoScreen({statusGame, board , onClickAtCell}) {\r\n\r\n  const backgroundColor = (statusGame) => {\r\n    switch(statusGame) {\r\n      case \"Run\": return \"#FFEF9F\"\r\n      break;\r\n      case \"Stop\": return \"#90F1EF\"\r\n      break;\r\n      case \"Win\": return \"#C1FBA4\"\r\n      break;\r\n      case \"Lost\": return \"#FFD6E0\"\r\n      break;\r\n      default: return \"\"\r\n    }\r\n  }\r\n\r\n  switch (statusGame) {\r\n    case \"Run\":\r\n      return <Board board={board} onClickAtCell={onClickAtCell} />\r\n\r\n    case \"Stop\":\r\n      return <InfoScreenBlock background={backgroundColor(statusGame)}>\r\n        <InfoScreenH1>Memory Game</InfoScreenH1>\r\n        <InfoScreenP>Нажмите для старта!</InfoScreenP>\r\n      </InfoScreenBlock>\r\n\r\n    case \"Win\":\r\n      return <InfoScreenBlock background={backgroundColor(statusGame)}>\r\n          <InfoScreenH1>Победа!</InfoScreenH1>\r\n          <InfoScreenP>Нажмите для старта!</InfoScreenP>\r\n      </InfoScreenBlock>\r\n\r\n    case \"Lost\":\r\n      return <InfoScreenBlock background={backgroundColor(statusGame)}>\r\n         <InfoScreenH1>Поражение!</InfoScreenH1>\r\n         <InfoScreenP>Нажмите для старта!</InfoScreenP>\r\n      </InfoScreenBlock>\r\n\r\n  }\r\n}\r\n\r\nexport default InfoScreen;","import React, { useState , useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Board from './components/Board';\r\nimport Cell from './components/Cell';\r\nimport InfoScreen from './components/InfoScreen';\r\n\r\nconst AppWrapper = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: #ffffff;\r\n`\r\n\r\nconst FooterBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`\r\nconst LogoBlock = styled.a`\r\n  width: 80px;\r\n  height: 30px; \r\n  background: url('https://rs.school/images/rs_school_js.svg') no-repeat;\r\n`\r\nconst GitBlock = styled.a`\r\n   \r\n\r\n`\r\n\r\nlet boardData = [\r\n  {symbol: \"A\", status: \"Closed\"}, \r\n  {symbol: \"F\", status: \"Closed\"}, \r\n  {symbol: \"A\", status: \"Closed\"}, \r\n  {symbol: \"B\", status: \"Closed\"}, \r\n  {symbol: \"C\", status: \"Closed\"}, \r\n  {symbol: \"D\", status: \"Closed\"},\r\n  {symbol: \"D\", status: \"Closed\"}, \r\n  {symbol: \"E\", status: \"Closed\"}, \r\n  {symbol: \"F\", status: \"Closed\"}, \r\n  {symbol: \"B\", status: \"Closed\"}, \r\n  {symbol: \"E\", status: \"Closed\"}, \r\n  {symbol: \"C\", status: \"Closed\"}\r\n];\r\n//\r\n\r\nlet startGame = () => ({\r\n  board: boardData,\r\n  statusGame: \"Run\",\r\n});\r\n\r\nfunction App() {\r\n  let [state, setState] = useState({\r\n    ...startGame(),\r\n    statusGame: \"Stop\",\r\n  });\r\n\r\n  let {board, statusGame} = state;\r\n\r\n  useEffect(() => {\r\n    if ((statusGame == \"Run\") && ((board.filter(cell => cell.status == \"Open\")).length == 2)) {\r\n      let dataCell = board.filter(cell => cell.status == \"Open\");\r\n      if (dataCell[0].symbol == dataCell[1].symbol) {\r\n        setState(\r\n          {\r\n            ...state,\r\n            board: board.map( (cell) => cell.status == \"Open\" ? {\r\n              ...cell,\r\n              status: \"Done\"\r\n            } : cell),\r\n          });\r\n      } else {\r\n        setTimeout( () => {\r\n          setState(\r\n            {\r\n              ...state,\r\n              board: board.map( (cell) => cell.status == \"Open\" ? {\r\n                ...cell,\r\n                status: \"Closed\"\r\n              } : cell),\r\n            });\r\n        },500)\r\n      };\r\n    };\r\n  },[state]);\r\n\r\n  useEffect(() => {\r\n    if (statusGame == \"Run\") {\r\n      if ((board.filter(cell => cell.status == \"Done\").length == board.length)){\r\n        setState(\r\n          {\r\n            ...state,\r\n            statusGame: \"Win\",\r\n          }); \r\n      }\r\n    };\r\n  },[state]);\r\n\r\n  let handleStartGameClick = () => {\r\n    if (statusGame != \"Run\") {\r\n      setState(startGame);\r\n    };\r\n  };\r\n\r\n  let handleClickAtCell = (i) => {\r\n    if ((statusGame = \"Run\") && (CellLessTwo) && (board[i].status != \"Done\")) {\r\n      setState(\r\n        {\r\n          ...state,\r\n          board: board.map( (cell,index) => index == i ? {\r\n            ...cell,\r\n            status: \"Open\"\r\n          } : cell),\r\n        });\r\n    };   \r\n  };\r\n\r\n  let CellLessTwo = (board.filter(cell => cell.status == \"Open\")).length < 2 ;\r\n\r\n  return (\r\n    <AppWrapper onClick={handleStartGameClick}>\r\n      <InfoScreen statusGame={statusGame} board={board} onClickAtCell={handleClickAtCell} />\r\n      <FooterBlock>\r\n        <LogoBlock href={'https://rs.school/react/'}/>\r\n        <GitBlock href={'https://github.com/evgenynovak'}> github.com/evgenynovak </GitBlock>\r\n      </FooterBlock>\r\n    </AppWrapper>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport styled , {createGlobalStyle} from 'styled-components';\r\n\r\nconst Global = createGlobalStyle`\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box; \r\n    font-family: sans-serif;\r\n    font-size: 16px;\r\n}\r\n`\r\n\r\nReactDOM.render(\r\n    <>\r\n      <Global />\r\n      <App />\r\n    </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}